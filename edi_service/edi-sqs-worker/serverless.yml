service: edi-sqs-worker
frameworkVersion: '3'

provider:
  name: aws
  region: us-west-2
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}

  iam:
    role:
      # Add statements to the IAM role to give S3 permissions to Lambda functions
      statements:
        - Effect: Allow
          Action:
            - 's3:ListBucket'
          Resource: 
            Fn::Join:
              - ''
              - - 'arn:aws:s3:::'
                - ${self:provider.s3.edi-bucket.name}
        - Effect: Allow
          Action:
            - 's3:GetObject'
            - 's3:PutObject'
            - 's3:DeleteObject'
          Resource: 
            Fn::Join:
              - ''
              - - 'arn:aws:s3:::'
                - ${self:provider.s3.edi-bucket.name}
                - '/*'

  s3:
    edi-bucket:
      name: edi-bucket-${self:custom.edi-bucket-key}-${self:provider.stage}
      tags:
        - Key: stage 
          Value: ${self:provider.stage}
        - Key: service 
          Value: ${self:service}
      versioningConfiguration:
        Status: Enabled

  # ecr:
  #   scanOnPush: true
  #   # Definitions of images that later can be referenced by key in `function.image`
  #   images:
  #     baseimage:
  #       # Path to the Docker context that will be used when building that image locally (default: '.')
  #       path: ./image/
  #       # Dockerfile that will be used when building the image locally (default: 'Dockerfile')
  #       file: Dockerfile.dev
  #       buildArgs:
  #         STAGE: ${sls:stage}
  #       cacheFrom:
  #         - my-image:latest

custom:
  edi-bucket-key: ${param:bucketSuffix, '1234567890'}

constructs:
  jobs:
    type: queue
    fifo: true
    alarm: grant@valltech.io
    worker:
      handler: index.consumer
      vpc:
        securityGroupIds:
          - sg-0328a420ec3e0e4cb
        subnetIds:
          - subnet-0b358670a8d42801c
          - subnet-0a61fa5d6f7366e0f

functions:
  producer:
    handler: index.producer
    vpc:
      securityGroupIds:
        - sg-0328a420ec3e0e4cb
      subnetIds:
        - subnet-0b358670a8d42801c
        - subnet-0a61fa5d6f7366e0f
    events:
      - s3:
          bucket: ${self:provider.s3.edi-bucket.name}
          event: s3:ObjectCreated:*
          rules:
            - suffix: .edi

    environment:
      QUEUE_URL: ${construct:jobs.queueUrl}
      


plugins:
  - serverless-lift
