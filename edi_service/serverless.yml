service: edi-sqs-worker
frameworkVersion: '3'

provider:
  name: aws
  region: us-west-2
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}

  iam:
    role:
      # Add statements to the IAM role to give S3 permissions to Lambda functions
      statements:
        - Effect: Allow
          Action:
            - 's3:ListBucket'
          Resource: 
            Fn::Join:
              - ''
              - - 'arn:aws:s3:::'
                - ${self:provider.s3.edi-bucket.name}
        - Effect: Allow
          Action:
            - 's3:GetObject'
            - 's3:PutObject'
            - 's3:DeleteObject'
          Resource: 
            Fn::Join:
              - ''
              - - 'arn:aws:s3:::'
                - ${self:provider.s3.edi-bucket.name}
                - '/*'

  s3:
    edi-bucket:
      name: edi-bucket-${self:custom.edi-bucket-key}-${self:provider.stage}
      tags:
        - Key: stage 
          Value: ${self:provider.stage}
        - Key: service 
          Value: ${self:service}
      versioningConfiguration:
        Status: Enabled

custom:
  edi-bucket-key: ${file(./config.js):bucketPrefix}

constructs:
  jobs:
    type: queue
    fifo: true
    alarm: ${file(./config.js):alarmEmail}
    worker:
      handler: index.consumer
      timeout: 600
      environment: ${file(./config.js):environment}
        

functions:
  producer:
    handler: index.producer
    events:
      - s3:
          bucket: ${self:provider.s3.edi-bucket.name}
          event: s3:ObjectCreated:*
          rules:
            - suffix: .edi
            - prefix: ${file(./config.js):incomingBucketPrefix}
    environment:
      QUEUE_URL: ${construct:jobs.queueUrl}

plugins:
  - serverless-lift
